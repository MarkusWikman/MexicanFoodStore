@using MexicanFoodStore.UI.Storage.Services;
@inject IStorageService Storage;
@inject IMapper mapper

<section class="d-flex flex-wrap">
    @foreach(var p in Service!.Products)
        {
                <div class="card mb-3" style="max-width: 540px;">
                    <div class="row g-0">
                        <div class="col-md-4">
                            <img src="@p.PictureURL" class="img-fluid rounded-start" alt="...">
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h5 class="card-title">@p.Name</h5>
                                <p class="card-text">@p.Description.Truncate(40)</p>
                            </div>
                        </div>
                    </div>
                    <div class="row card-footer g-0">
                <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked>
                    <label class="btn btn-outline-primary" for="btnradio1">1</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off">
                    <label class="btn btn-outline-primary" for="btnradio2">5</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off">
                    <label class="btn btn-outline-primary" for="btnradio3">10</label>
                </div>
                <button class="btn btn-sm btn-success" @onclick="() => AddToCart(p)"><i class="bi-cart"></i></button>
                    </div>
                </div>
        }
</section>

@code {
    [CascadingParameter(Name = "Service")] public UIService? Service { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }

    async Task AddToCart(ProductGetDTO product)
    {
        var cartItem = mapper.Map<CartItemDTO>(product);
        Service!.CartItems.Add(cartItem);
        await Service!.SaveToStorage("CartItems", Service!.CartItems);

        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync();
    }
        }